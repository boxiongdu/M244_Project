---
title: "MATH244 project EDA"
format: html
editor: visual
---


```{python}
#| label: data-loading
#| warning: false
#| message: false

import os
import json
import pandas as pd

first_file = '/Users/feifei/Desktop/M244_Project/data/games.json'
with open(first_file, 'r') as file:
    json_data = json.load(file)

unnecessary_vars = [
    'packages', 'screenshots', 'movies', 'header_image', 'website', 
    'support_url', 'notes', 'support_email', 'required_age', 'metacritic_url',
    'detailed_description', 'about_the_game', 'achievements', 
    'full_audio_languages', 'dlc_count', 'supported_languages', 'developers'
]

games = []
for app_id, game_info in json_data.items():
    filtered_info = {k: v for k, v in game_info.items() if k not in unnecessary_vars}
    
    tags = game_info.get('tags', {})
    filtered_info['tags'] = list(tags.keys()) if isinstance(tags, dict) else []
    filtered_info['tag_frequencies'] = list(tags.values()) if isinstance(tags, dict) else []
    filtered_info['app_id'] = app_id
    
    games.append(filtered_info)

df = pd.DataFrame(games)

df.to_csv('games.csv', index=False)
```

```{python}
#| label: data-wrangling
#| warning: false

df = df[df['median_playtime_forever'] > 0]

keep_cols = [
    'name', 'release_date', 'price', 'windows', 'mac', 'linux',
    'publishers', 'genres', 'positive', 'negative', 'estimated_owners',
    'median_playtime_forever', 'peak_ccu'
]
df = df[keep_cols]


df['release_year'] = pd.to_datetime(df['release_date'], format='mixed').dt.year


system_cols = ['windows', 'mac', 'linux']
for col in system_cols:
    df[col] = df[col].astype(int)
df['compatible_systems'] = df[system_cols].sum(axis=1)

df['positive_rate'] = df['positive'] / (df['positive'] + df['negative'])

df['estimated_owners'] = pd.Categorical(df['estimated_owners'])

df['genres'] = df['genres'].apply(lambda x: x[:1] if len(x) > 1 else x)

df = df.drop(columns=['release_date', 'windows', 'mac', 'linux', 'positive', 'negative'])

print(df.head(3))

df.to_csv('games.csv', index=False)
```

```{r}
library(ggplot2)
library(dplyr)
library(stats)

games <- read.csv("games.csv")
```

```{r}
games_filtered <- games %>%
  filter(
    !is.na(price),
    !is.na(positive_rate),
    price <= quantile(price, 0.9999, na.rm = TRUE)
  )

ggplot(games_filtered, aes(x = price, y = positive_rate)) +
  geom_point(alpha = 0.5, color = "blue") +
  geom_smooth(method = "lm", color = "red", se = FALSE) +
  labs(
    title = "Positive Review Rate vs. Price",
    x = "Price",
    y = "Positive Review Rate"
  ) +
  theme_minimal()
```



```{r}
price_trend <- games %>%
  group_by(release_year) %>%
  summarise(
    avg_price = mean(price, na.rm = TRUE),
    n = n()
  ) %>%
  filter(n >= 50, release_year >= 2010)

ggplot(price_trend, aes(x = release_year, y = avg_price)) +
  geom_line(color = "green", linewidth = 1) +
  geom_point(color = "darkgreen", size = 2) +
  labs(
    title = "Game Prices with Year",
    x = "Release Year",
    y = "Average Price"
  ) +
  theme_minimal()
```

```{r}
ggplot(games, aes(x = positive_rate, fill = compatible_systems)) +
  geom_density(alpha = 0.6) +
  labs(
    title = "Multi-Platform Support Correlates with Better Reviews",
    x = "Positive Review Rate",
    y = "Density",
    fill = "Compatible Systems"
  ) +
  scale_fill_brewer(palette = "Set2") +
  theme_minimal()
```

```{r}
games_filtered <- games %>%
  filter(price <= quantile(price, 0.95, na.rm = TRUE),
         median_playtime_forever <= quantile(median_playtime_forever, 0.95, na.rm = TRUE))

ggplot(games_filtered, aes(x = price, y = median_playtime_forever)) +
  geom_point(alpha = 0.4, color = "blue") +
  geom_smooth(method = "lm", formula = y ~ log(x + 1), color = "red") +
  scale_x_log10(labels = scales::dollar) +  
  labs(
    title = "Median Playtime vs. Price",
    x = "Price",
    y = "Median Playtime"
  ) +
  theme_minimal()
```

```{r}
games_filtered <- games %>%
  filter(
    peak_ccu > 0,  
    median_playtime_forever > 0,
    peak_ccu <= quantile(peak_ccu, 0.95, na.rm = TRUE),
    median_playtime_forever <= quantile(median_playtime_forever, 0.95, na.rm = TRUE)
  )


ggplot(games_filtered, aes(x = peak_ccu, y = median_playtime_forever)) +
  geom_point(alpha = 0.3, color = "blue") +
  geom_quantile(quantiles = 0.5, color = "red", linewidth = 1) +  
  scale_x_log10() +  
  labs(
    title = "Median Playtime vs. Peak CCU",
    x = "Peak Concurrent Users",
    y = "Median Playtime"
  ) +
  theme_minimal()
```

```{r}
library(plotly)

plot_ly(games_filtered, 
        x = ~peak_ccu, 
        y = ~price, 
        z = ~median_playtime_forever,
        color = ~positive_rate,
        colors = viridisLite::viridis(10),
        type = "scatter3d",
        mode = "markers",
        marker = list(size = 3, opacity = 0.6)) %>%
  layout(
    scene = list(
      xaxis = list(title = "Peak CCU", type = "log"),
      yaxis = list(title = "Price"),
      zaxis = list(title = "Playtime")
    ),
    title = "3D Interaction: Price, Peak CCU, and Playtime"
  )
```




