---
title: "Project Preliminary Analysis"
format: html
editor: visual
---

## 

```{r,message=FALSE}
#Load R packages here
library(reticulate)
library(tidyverse)
```

```{python import packages}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.compose import make_column_transformer
from sklearn.model_selection import cross_validate
from sklearn.model_selection import GroupKFold
from sklearn.linear_model import LinearRegression, Ridge, RidgeCV
from sklearn.linear_model import ElasticNet, ElasticNetCV
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
```

```{python}
df.columns
```

```{python}
df = pd.read_csv('/Users/feifei/Desktop/M244_Project/data/games_cleaned.csv')
```

```{python}
y = df['median_playtime_forever']

X = df.drop(['name', 'median_playtime_forever', 'Unnamed: 0'], axis=1)

numerical_columns = ['price', 'peak_ccu', 'positive_rate']

categorical_columns = ['publishers', 'genres', 'estimated_owners', 'release_year', 'compatible_systems']

preprocessor = make_column_transformer(
   (OneHotEncoder(drop="first"), categorical_columns),
   (StandardScaler(), numerical_columns),
   remainder = 'passthrough',
   verbose_feature_names_out=False, # avoid prepending preprocessor names
)

transformed_X = preprocessor.fit_transform(X)
```

```{python}
alphas_list = 10 ** np.linspace(-2, 3, 20)

pipeline_lasso = Pipeline([
    ('preprocess', preprocessor),
    ('estimator', ElasticNetCV(alphas=alphas_list, l1_ratio=1, max_iter=10000))
])

pipeline_ols = Pipeline([
    ('preprocess', preprocessor),
    ('estimator', LinearRegression())
])

```

```{python}
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=20250416)
```

```{python}
pipeline_lasso.fit(X_train, y_train)
pipeline_ols.fit(X_train, y_train)
```

```{python}
# Lasso model predictions
y_pred_train_lasso = pipeline_lasso.predict(X_train)
y_pred_test_lasso = pipeline_lasso.predict(X_test)

# train MSE lasso
mean_squared_error(y_train, y_pred_train_lasso)
# test MSE lasso
mean_squared_error(y_test, y_pred_test_lasso)
```




